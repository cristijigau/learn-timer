{"version":3,"sources":["components/Timer/styles.js","helpers/helperFunctions.js","components/TimeInput/index.js","components/Button/index.js","components/ButtonSection/index.js","components/TimeDisplay/index.js","components/AmountInput/index.js","components/Timer/index.js","theme/index.js","theme/constants.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","backgroundColor","palette","background","width","height","display","flexDirection","justifyContent","padding","spacing","card","foreground","typography","color","primary","main","secToHMS","value","hours","parseInt","minutes","seconds","formatLabel","label","charAt","toUpperCase","slice","TimeInput","inputValue","setInputValue","time","activity","FormControl","fullWidth","variant","InputLabel","htmlFor","Input","id","endAdornment","InputAdornment","position","type","inputProps","min","onChange","e","newTime","target","disabled","Button","props","setTimerState","timerState","handlePlay","handlePause","handleReset","icon","getIcon","action","getButtonAction","active","IconButton","onClick","style","ButtonSection","buttons","map","Box","my","TimeDisplay","Typography","AmountInput","amount","setAmount","newAmount","audio","Audio","Timer","classes","useState","setTime","timerId","setTimerId","studyTime","setStudyTime","breakTime","setBreakTime","setActivity","startTimer","setInterval","prev","stopTimer","clearInterval","resetTimer","pause","currentTime","useEffect","play","className","Grid","container","item","xs","sm","md","lg","Card","CardHeader","title","CardContent","mt","createTheme","comment","keyword","function","property","string","number","constant","markup_tag","markup_attribute","class","operator","App","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.36fbfe80.chunk.js","sourcesContent":["import { makeStyles } from '@mui/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background,\r\n    width: '100vw',\r\n    height: '100vh',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    padding: theme.spacing(1),\r\n  },\r\n  card: {\r\n    backgroundColor: theme.palette.foreground,\r\n  },\r\n  typography: {\r\n    color: theme.palette.primary.main,\r\n  },\r\n}));\r\n\r\nexport default useStyles;\r\n","export function secToHMS(value) {\r\n  const hours = parseInt(value / 3600);\r\n  const minutes = parseInt((value % 3600) / 60);\r\n  const seconds = parseInt((value % 3600) % 60);\r\n  return `${hours}:${minutes < 10 ? '0' : ''}${minutes}:${\r\n    seconds < 10 ? '0' : ''\r\n  }${seconds}`;\r\n}\r\n\r\nexport function formatLabel(label) {\r\n  return label.charAt(0).toUpperCase() + label.slice(1);\r\n}\r\n","import FormControl from '@mui/material/FormControl';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport Input from '@mui/material/Input';\r\nimport { formatLabel } from '../../helpers/helperFunctions';\r\n\r\nconst TimeInput = ({ inputValue, setInputValue, time, activity }) => {\r\n  const handleTimeChange = e => {\r\n    const newTime = e.target.value;\r\n    if (+newTime >= 0) setInputValue(newTime);\r\n  };\r\n\r\n  return (\r\n    <FormControl fullWidth variant=\"standard\">\r\n      <InputLabel htmlFor=\"standard-adornment-time\">\r\n        {formatLabel(activity)} Time\r\n      </InputLabel>\r\n      <Input\r\n        id=\"standard-adornment-time\"\r\n        endAdornment={<InputAdornment position=\"end\">min</InputAdornment>}\r\n        type=\"number\"\r\n        inputProps={{ min: '0' }}\r\n        value={inputValue}\r\n        onChange={handleTimeChange}\r\n        disabled={!!time}\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default TimeInput;\r\n","import React from 'react';\r\nimport PlayCircleIcon from '@mui/icons-material/PlayCircle';\r\nimport PauseIcon from '@mui/icons-material/Pause';\r\nimport RotateLeftIcon from '@mui/icons-material/RotateLeft';\r\nimport IconButton from '@mui/material/IconButton';\r\n\r\nfunction getIcon(type) {\r\n  switch (type) {\r\n    case 'play':\r\n      return <PlayCircleIcon />;\r\n    case 'pause':\r\n      return <PauseIcon />;\r\n    case 'reset':\r\n      return <RotateLeftIcon />;\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\nconst Button = props => {\r\n  const { type, setTimerState, timerState, time } = props;\r\n\r\n  const handlePlay = () => {\r\n    setTimerState('play');\r\n  };\r\n  const handlePause = () => {\r\n    setTimerState('pause');\r\n  };\r\n  const handleReset = () => {\r\n    setTimerState('reset');\r\n  };\r\n\r\n  const getButtonAction = type => {\r\n    switch (type) {\r\n      case 'play':\r\n        return handlePlay;\r\n      case 'pause':\r\n        return handlePause;\r\n      case 'reset':\r\n        return handleReset;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const icon = getIcon(type);\r\n  const action = getButtonAction(type);\r\n  const active = timerState === type && time;\r\n  return (\r\n    <IconButton\r\n      {...props}\r\n      onClick={action}\r\n      style={active ? { backgroundColor: 'rgba(0, 0, 0, 0.04)' } : {}}\r\n    >\r\n      {icon}\r\n    </IconButton>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '../Button';\r\n\r\nconst ButtonSection = ({ setTimerState, timerState, time }) => {\r\n  const types = ['play', 'pause', 'reset'];\r\n  const buttons = types.map(type => (\r\n    <Button\r\n      type={type}\r\n      setTimerState={setTimerState}\r\n      timerState={timerState}\r\n      time={time}\r\n      key={type}\r\n    />\r\n  ));\r\n  return (\r\n    <Box my={2} style={{ display: 'flex', justifyContent: 'center' }}>\r\n      {buttons}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ButtonSection;\r\n","import Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\nimport { formatLabel, secToHMS } from '../../helpers/helperFunctions';\r\n\r\nconst TimeDisplay = ({ time, activity, timerState }) => {\r\n  return (\r\n    <>\r\n      <Box my={2} style={{ display: 'flex', justifyContent: 'center' }}>\r\n        <Typography variant=\"h4\">\r\n          {timerState ? formatLabel(activity) : 'Set Timer'}\r\n        </Typography>\r\n      </Box>\r\n      <Box my={2} style={{ display: 'flex', justifyContent: 'center' }}>\r\n        <Typography variant=\"h3\">{secToHMS(time)}</Typography>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TimeDisplay;\r\n","import FormControl from '@mui/material/FormControl';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport Input from '@mui/material/Input';\r\n\r\nconst AmountInput = ({ time, amount, setAmount }) => {\r\n  const handleTimeChange = e => {\r\n    const newAmount = e.target.value;\r\n    if (+newAmount >= 0) setAmount(newAmount);\r\n  };\r\n  return (\r\n    <FormControl fullWidth variant=\"standard\">\r\n      <InputLabel htmlFor=\"standard-adornment-amount\">Amount</InputLabel>\r\n      <Input\r\n        id=\"standard-adornment-amount\"\r\n        type=\"number\"\r\n        inputProps={{ min: '0' }}\r\n        value={amount}\r\n        onChange={handleTimeChange}\r\n        disabled={!!time}\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default AmountInput;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport useStyles from './styles';\r\nimport Grid from '@mui/material/Grid';\r\nimport Typography from '@mui/material/Typography';\r\nimport TimeInput from '../TimeInput';\r\nimport ButtonSection from '../ButtonSection';\r\nimport TimeDisplay from '../TimeDisplay';\r\nimport AmountInput from '../AmountInput';\r\n\r\nconst audio = new Audio(\r\n  'https://interactive-examples.mdn.mozilla.net/media/cc0-audio/t-rex-roar.mp3'\r\n);\r\n\r\nconst Timer = () => {\r\n  const classes = useStyles();\r\n\r\n  const [time, setTime] = useState(0);\r\n  const [timerState, setTimerState] = useState();\r\n  const [timerId, setTimerId] = useState();\r\n  const [studyTime, setStudyTime] = useState(0);\r\n  const [breakTime, setBreakTime] = useState(0);\r\n  const [amount, setAmount] = useState(1);\r\n  const [activity, setActivity] = useState('study');\r\n\r\n  useEffect(() => {\r\n    if (!timerState) return;\r\n    if (timerState === 'play' && studyTime) startTimer(activity);\r\n    if (timerState === 'pause') stopTimer();\r\n    if (timerState === 'reset' || !studyTime || !+amount) resetTimer();\r\n    return () => clearInterval(timerId);\r\n  }, [timerState]);\r\n\r\n  useEffect(() => {\r\n    if (!time && timerId) {\r\n      handleEndOfTime();\r\n    }\r\n  }, [time]);\r\n\r\n  function startTimer(activity) {\r\n    if (!+amount) return;\r\n    if (!time) setTime(activity === 'study' ? studyTime * 60 : breakTime * 60);\r\n    const id = setInterval(() => {\r\n      setTime(prev => prev - 1);\r\n    }, 1000);\r\n    setTimerId(id);\r\n  }\r\n\r\n  function stopTimer() {\r\n    clearInterval(timerId);\r\n  }\r\n\r\n  function resetTimer() {\r\n    stopTimer();\r\n    setTime(0);\r\n    setTimerId();\r\n    setStudyTime(0);\r\n    setBreakTime(0);\r\n    setTimerState();\r\n    setAmount(1);\r\n    setActivity('study');\r\n    stopAudio();\r\n  }\r\n\r\n  function handleEndOfTime() {\r\n    stopTimer();\r\n    playAudio();\r\n    if (\r\n      (activity === 'break' && +amount - 1 > 0) ||\r\n      (activity === 'study' && +amount)\r\n    ) {\r\n      if (activity === 'break') setAmount(prev => prev - 1);\r\n      setActivity(activity === 'study' ? 'break' : 'study');\r\n      startTimer(activity === 'study' ? 'break' : 'study');\r\n    } else resetTimer();\r\n  }\r\n\r\n  function playAudio() {\r\n    audio.play();\r\n  }\r\n\r\n  function stopAudio() {\r\n    audio.pause();\r\n    audio.currentTime = 0;\r\n  }\r\n\r\n  return (\r\n    <Box className={classes.root}>\r\n      <Grid container justifyContent=\"center\">\r\n        <Grid item xs={12} sm={8} md={6} lg={4}>\r\n          <Card className={classes.card}>\r\n            <CardHeader\r\n              title={\r\n                <Typography className={classes.typography}>\r\n                  Learn Timer\r\n                </Typography>\r\n              }\r\n            >\r\n              Learn Timer\r\n            </CardHeader>\r\n            <CardContent>\r\n              <TimeDisplay\r\n                time={time}\r\n                activity={activity}\r\n                timerState={timerState}\r\n              />\r\n              <TimeInput\r\n                inputValue={studyTime}\r\n                setInputValue={setStudyTime}\r\n                time={time}\r\n                activity=\"study\"\r\n              />\r\n              <Box mt={2}>\r\n                <TimeInput\r\n                  inputValue={breakTime}\r\n                  setInputValue={setBreakTime}\r\n                  time={time}\r\n                  activity=\"break\"\r\n                />\r\n              </Box>\r\n              <Box mt={2}>\r\n                <AmountInput\r\n                  time={time}\r\n                  amount={amount}\r\n                  setAmount={setAmount}\r\n                />\r\n              </Box>\r\n              <ButtonSection\r\n                setTimerState={setTimerState}\r\n                timerState={timerState}\r\n                time={time}\r\n              />\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","import { createTheme } from '@mui/material/styles';\r\nimport { colors } from './constants';\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    ...colors,\r\n  },\r\n});\r\n\r\nexport default theme;\r\n","export const colors = {\r\n  background: '#282c34',\r\n  foreground: '#abb2bf',\r\n  comment: '#636d83',\r\n  keyword: '#10b1fe',\r\n  function: '#3fc56b',\r\n  property: '#ce9887',\r\n  string: '#f9c859',\r\n  number: '#ff78f8',\r\n  constant: '#9f7efe',\r\n  markup_tag: '#3691ff',\r\n  markup_attribute: '#ff936a',\r\n  class: '#ff6480',\r\n  operator: '#7a82da',\r\n};\r\n","import './App.css';\nimport Timer from './components/Timer';\nimport { ThemeProvider } from '@mui/material/styles';\nimport theme from './theme';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n        <Timer />\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}